// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// +kubebuilder:docs-gen:collapse=Apache License

package integration_test

import (
	"crypto/tls"
	"fmt"
	"net/http"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
)

var _ = Describe("Integration", func() {
	const (
		userToken1               = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMDIiLCJhdWQiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNzcyMjg3NjE5fQ.wEG2zFLpkfe9pxcpndVNMz1Szw-4-XewXDnMYW6edt6vusju-N_a3AIMMaFNKv-T77GQhg1PfiPb-dTt_FJE34SzW73ccWXr_WuH9fu0dBN8JbJ0yEbQlWjHqV3-aLPLMqH0x2DPInA2N9RQuhHwyPsdARpm7k4LYHCTutJRl0fj4Jt8ZLpxVoowiJNclP6zBJ6FzjGdCHz26ZiMk_gNEN8xL8b6IChKOs4L48Kw5llcC59h9f-PQKSBCteq8pxG12z2umSVEGq5WcYmkUQNOV-VyplV200OLXG21N6pB8VtnFcUj_nBDyacJXxdOm6TaK-HuTeo_hGnKCmjxUfEvQ"
		userToken2               = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW1wbGUiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyLCJjdXN0b21jbGFpbSI6ImpvaG5kb2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MDAwMyIsImF1ZCI6InNvbWUtY2xpZW50LWlkIiwiZXhwIjoxNzcyMjg3NjE5fQ.YDeG1KmyB8XpWrkUf99WYw2lWdeT5_wz1DrLGspiVgqpFFhZeImbUwF9eWo6qQGyRou_GlRX2tE5hPT4jCBufx5qx6XxrtxF9AU0plr_D8PKeelyYTNmWboAmr2nGWIqxJqJJfpmKhVKYduPXdxCX6qzyLO97nNHMtyvegzwPhiW54GU4t_fyssbSYFAEe8zenqeDgCE81Qv73SM2aNEmnvFJ5ynNmUwYQRyC5hLf3PsHen8AaPOBngTfyrmZ9leV2vCqu0r5up-HnEVmPg_EpMiYzdDN7BAvxMAXmAsgs2dokgiOLnzFkwe7R2ABYqWGkq-voNGUm0dJQyagtW76g"
		userToken3               = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW1wbGUiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyLCJjdXN0b21jbGFpbSI6ImpvaG5kb2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MDAwMyIsImF1ZCI6InNvbWUtY2xpZW50LWlkIiwiZXhwIjoxNzcyMjg3NjE5fQ.bN0MeuWp6ijX_YKU6AgjiMVCSUA0nsAoO-4ZgZpSwYrkq3OzrjCIv8LZe1E_n4UacM3gGk_utVoo9ERdPuOvkkhj7bde9yDTHSTo1EOzDYYJ4pufKzzM8ctiRPHOp7nJyc4-c8L-s5IyYXO9Hf4eNE9bK9Wkzd9UJOK6jDc-ey_EO-AhZ3wfWEijxI5PYNvahcwdJQIi1O_YtRRPNt-NbQJcxbcXQxkO6eYXUa6M0rSo6ppc0wXttbhWBrpafdIQRVOx8inD5b3qhbqQe_wboyOR0FaXaIm4zxyB4sAyZ28f2AuJwButvy-E0Zhs3v9hDEzW8ovNPENFbCdoZhuBxw"
		userTokenWithKid         = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlRXck5DTDdvU0p3WDhlcWhRX093RDZuSWZqOEs3YzJTZ3ZrMlhkNGo0b0kifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMDIiLCJhdWQiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNzcyMjg3NjE5fQ.R5-3W0BLTUz4wI3pyWb-nDx45mlge5lWgezYodi66bdHGLkZ2iiH0KCPxKdGxI5lsRcAtYM5-cNfhyB6AoyEe4BPa7H2hPaXslS_IgWTKRQzGlfXFZu6eBJSbkqMEjUt4gfTiMRgkYoz2Y11m__TXsopYi2FSdqRF79EW5_tYiwnwczrMr-gAo6R1czLqmIeeQqvDvHuifovBFImkrvwFc7DYJyg6_vdLnGQ_roXmDp2j8m16QMB4DZcKNR8cJemNYI6PC9sgCHhLPwq6IDAoryciudt9k-JUmO5rdYSuld_gdqnyS0qNqz4iX_4vgxZyJjvTPqjjIho8GzQmZ5C9Q"
		userTokenStaticKeys      = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlRXck5DTDdvU0p3WDhlcWhRX093RDZuSWZqOEs3YzJTZ3ZrMlhkNGo0b0kifQ.eyJzdWIiOiJzdGF0aWMiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyLCJlbWFpbCI6ImpvaG5kb2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MDAwNCIsImF1ZCI6InN0YXRpYyIsImV4cCI6MTc3MjI4NzYxOX0.Gi1T5Gzqmcx-sRrz3b0fCwW0r7h4KD8DCQfQy7g9jgMJz7HJOrL-txLxtqwujhrzqe2dPpqb9v2zYrsWmdWHqTOlNbbHcgR0tC73dLFP4QVeayw2m5O3byqCZ8lvJA0KzlAtUWZce03sPyO6FoTBpwfMS7E3lwd688GgNTxoDMhaVaMlctubjw1v-XuThaJoZE5takV7rZVoXYuP1m5fPOr7kJO2WAciTznz7iIwItSlB9-7wuO3pFPxvE8Q8plK7WpP3G0SXSuTdCC-Pf_c8ipBrsiJQVBuEmaP0b5A7jUie4CZdzjqUMsas6xyqMqxK2Gb1N2mq9h1hUa6bFa_CA"
		userTokenInvalidClaim    = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZW1haWwxIjoiam9obmRvZUBleGFtcGxlLmNvbSIsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0OjUwMDAyIiwiYXVkIjoiMTIzNDU2Nzg5MCIsImV4cCI6MTc3MjI4NzYxOX0.Bu8QayDT6dAswYUU6zCgNsD2jLFU2CCgCuaA314JXvl6k08nlwB4f0krYe2Kc6Yj_lQehTq4KSY_Uy-YaJn6XR43jpGa77HsRiBUBp_0dhB7WvZaszx4XJle6oum3bBjV6jXXZaBNUEkIINRNE-KfH41qvH8FDn0xw6F_Lgc3f8GS1EeT1uYK404Dt8L4BF4FPoB0F3MTf77z9HYF4BNNdhBhGpeCNlmZ2KkxyCtikz21_9C2fZ8k1pUyU24T03fLQWXaXFuja5mR4sp301pam-3zRiAdxVW0bdKmf3PDCSKrgnPXu9mvCQnsaueUxWl9ixo0BkwR_6viaIPfonlzg"
		userTokenInvalidIssuer   = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMTAiLCJhdWQiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNzcyMjg3NjE5fQ.q1uDjNWojuvwdJPO6-WHnlOBSgkEf6i4CZNhqhzYgPYowTDn0wbmYanCHgBp_04eAeqRm9F2Wh4z0j2InE7KaqQiELwfqRfqfV-4uczE8qrDUgUZbIteyGHzTKGjxq0rBws0wJPAkRLdca5t-F0k0uNb8SPM2b8y4I53_hk82xz_Xs_E1mU0FQq_q49osoc6GA0xEojS3nh8jzmao3rzBwC5CSwlTrh9g2kKy2o8-mhMSgOOg2MJhOmDFuNK98d0iPs__1n6CRb9ofLGg6V7M7VHFKEj55Nu5_qGzol92qy_w46LbkhNi_ZsDWAQiqMVDMAnVdoCImvw-ZSeH64kkg"
		userTokenInvalidClientID = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW1wbGUiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyLCJjdXN0b21jbGFpbSI6ImpvaG5kb2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MDAwMyIsImF1ZCI6InNvbWUtY2xpZW50LWlkLWludmFsaWQiLCJleHAiOjE3NzIyODc2MTl9.G2b1DDLstJ65KlvyeHur6JH58fnU_R4rQc7GCE1VTQktT59NHIj62UK2yjnmvXlXY7FDFhoOxfhKi-mqPMFjH8ZzMjg2duGvO2xHvm26kAQo0PaIzt7Ui_HEFEeo1WrSEmCJW1Bl1AhrhZofFLiX_5QXia_m45bZMi5xWCGHfo9mz3uIDQuxlW4dx1XYeQSZWHONQcHf0ESGzeu_R6UT1aGpe4rCOCUC4-aMD9hc1FgkQSGp-ObjcKJ-nSG7WQIK2RQ7-O9ETgP0e3aK48-7H-3AHeqotpjcjHvxHRQgISrF8AindjyKN7KGABxeAoxjsfaf0B5slmywH78f5d7vTg"
		userTokenInvalidExpired  = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW1wbGUiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyLCJjdXN0b21jbGFpbSI6ImpvaG5kb2VAZXhhbXBsZS5jb20iLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MDAwMyIsImF1ZCI6InNvbWUtY2xpZW50LWlkIiwiZXhwIjoxMDcyMjg3NjE5fQ.JzQlAhVsLEDBGjUi9WvxqkdOEHzWT8oj7kFrnstbVod56hsSuWOcwF2jcyj-oWKTV8GN6rD7tLHgGavD8ER1v1Ef-j7NrLDgflSsr9l9jBEwEEF55icr4T2JvODEKsAU8q1gDqLonbuBQMxTbRRrXQ74N1jhwlagohl9hSXegThNIBfwqHG-HfYR9R8_v5tYUT22Bvg9ILabL2I4goky8XXthdZiF_j-673XTx0xejlXyx6ZhA0LgRz0Jxn_WC4nq0qNz-wgNu1sxEY0D3gmEj3ANJT8ZOEYQmLd-u8R1NqxyXNVNpMUBjvGZKcuCapl-vwG3kZjb2IebrZMFlf4_Q"
		userTokenUnknownIDP      = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMDIiLCJhdWQiOiIxMjM0NTY3ODkwIiwiZXhwIjoxNzcyMjg3NjE5fQ.aP6PIrsPmWfxtEH_HOX9M81sUsLSdhi78pIiezDBY_-pHi1pmMeD9EbdFKZadLzoFFtf6avSmm2oUCWv5rDFHa0vashVFj1tut4F9mXrQdgl6u6Iu0F93tz-f4TvoKlCtvMrdefdCA3E_HuJxfbd2bpp4ICD0Pq0xEIY5dlLDsENlY9SffHQ8H_VJxNk91qNNLPjNSGg0wYrAvhc62tsE8081OWly9rv5YLN6uE-iknFGJBSWzQUMtdTNFEH1Ewmsz2BVMgufHYu5ZhbPlVnK8nfUztWySed5tJwfqabZS_oypir8hwu6Y34XUivx0hKCRpumEygYx-d8UX6ag6kVg"
	)

	Context("Authenticating user to the kube api-server via trusted identity provider", func() {
		DescribeTable("user authentication",
			func(userToken string, expectedStatusCode int) {
				tr := &http.Transport{
					TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
				}
				client := &http.Client{Transport: tr}
				req, err := http.NewRequest("GET", fmt.Sprintf("https://localhost:%v/api/v1/pods", apiServerSecurePort), nil)
				Expect(err).NotTo(HaveOccurred())
				req.Header.Set("Authorization", fmt.Sprintf("Bearer %v", userToken))
				res, err := client.Do(req)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.StatusCode).To(Equal(expectedStatusCode))
			},
			// User has no permissions to list pods
			Entry("valid token from first identity provider", userToken1, http.StatusForbidden),
			Entry("valid token from second identity provider second key", userToken2, http.StatusForbidden),
			Entry("valid token from second identity provider first key", userToken3, http.StatusForbidden),
			Entry("valid token from first identity provider with kid in header", userTokenWithKid, http.StatusForbidden),
			Entry("valid token validated via static jwks", userTokenStaticKeys, http.StatusForbidden),
			Entry("invalid token due to no required username claim present", userTokenInvalidClaim, http.StatusUnauthorized),
			Entry("invalid token due to wrong issuer", userTokenInvalidIssuer, http.StatusUnauthorized),
			Entry("invalid token due to wrong client id", userTokenInvalidClientID, http.StatusUnauthorized),
			Entry("invalid token due to expiration timestamp", userTokenInvalidExpired, http.StatusUnauthorized),
			Entry("valid token from unknown identity provider", userTokenUnknownIDP, http.StatusUnauthorized),
		)
	})
})
